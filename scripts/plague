#!/usr/bin/env python

import os

import plague
import plague_html_report
import plague_cli_arguments

matches = {}

checked_files = []
ignored_files = []
error_log = []
reports_generated = 0

def ignore_file (path, message):
    global ignored_files
    if not path in ignored_files:
        ignored_files.append(path)
        print(' <- ' + message, end='')
        error_log.append(path + ' <- ' + message)

block_cache = {}

def get_block(path):
    global block_cache

    if not path in block_cache:
        block_cache[path] = plague.Block(path)

    return block_cache[path]

def analyze (path_self, block_self, path_other, block_other, a):
    global reports_generated

    checks = block_self.compare(block_other)

    for threshold in a['thresholds']:
        check_matches = len(checks['matches'][threshold])
        check_total = checks['counters'][threshold]

        if check_total and a['thresholds'][threshold] <= check_matches / check_total:
            if not path_self in matches:
                matches[path_self] = 0

            self_path = path_self[len(a["paths"]["submissions"]):]
            other_path = path_other[len(a["paths"]["submissions"]):]

            match_count = matches[path_self]

            plague_html_report.generate(
                checks,
                a['thresholds'],
                a['paths']['reports'],
                self_path,
                other_path,
                match_count
            )

            reports_generated += 1
            matches[path_self] += 1

            break

def walk (path):
    paths = []

    if not path:
        return paths

    for root, dirs, files in os.walk(path):
        for f in files:
            paths.append(os.path.join(root, f))

    return paths

def main():
    global checked_files
    global ignored_files
    global reports_generated

    a = plague_cli_arguments.get()

    width = 30

    print(width * '*')
    print('PLAGIARISM CHECKER'.center(width))
    print(width * '-')

    submissions = walk(a['paths']['submissions'])
    archive = walk(a['paths']['archive'])
    all_files = submissions + archive

    if not submissions:
        print(a['paths']['submissions'], '<-', 'no files found')
        print(width * '-')
        exit()

    for s in range(len(submissions)):
        fs = submissions[s]
        if fs in ignored_files:
            continue
        print('checking ' + fs, end='')

        try:
            block_self = get_block(fs)
        except plague.ParseError as e:
            ignore_file(fs, str(e))
            print('\n')
            continue

        print()

        collections = [
            submissions[s+1:],
            archive
        ]

        for collection in collections:
            for fo in collection:
                if fo in ignored_files or fo == fs:
                    continue

                print(' -> ' + fo, end='')

                try:
                    block_other = get_block(fo)
                except plague.ParseError as e:
                    ignore_file(fo, str(e))
                    print()
                    continue

                analyze(fs, block_self, fo, block_other, a)

                for path in [fs, fo]:
                    if not path in checked_files:
                        checked_files.append(path)

                print()

        print()

    c_files = len(checked_files)
    i_files = len(ignored_files)
    t_files = len(all_files) # total

    c_percentage = round(100 * c_files / t_files, 2)
    i_percentage = round(100 * i_files / t_files, 2)

    print(width * '-')
    print('| SUBMISSION FILES: ', len(submissions))
    print('| REPORTS GENERATED:', reports_generated)
    print(width * '-')
    print('| TOTAL FILES:', t_files)
    print('| - CHECKED:  ', c_files, '(' + str(c_percentage) + '%)')
    print('| - IGNORED:  ', i_files, '(' + str(i_percentage) + '%)')
    print(width * '-')

    if error_log:
        print('| ERRORS:')
        for error in error_log:
            print('| -', error)
        print(width * '-')

if __name__ == '__main__':
    main()
